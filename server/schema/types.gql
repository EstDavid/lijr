module.exports = `
  enum Visibility {
    public
    private
    friends
  }

  type Measurable {
    title: String!
    description: String
    type: String!
    journaledDate: String
    score: Int
    vibration: Int
  }

  type GenericLifeAspect {
    _id: ID!
    user: ID!
    entries: [Entry]
    aspectType: String!
    title: String!
    description: String!
    measurables: [Measurable]
    visibility: Visibility
    timePeriodStart: String,
    timePeriodEnd: String
  }

  type RelationshipAspect {
    _id: ID!
    user: ID!
    entries: [Entry]
    aspectType: String!
    title: String!
    description: String!
    measurables: [Measurable]
    visibility: Visibility

    relationshipType: String!
    nameOfPerson: String!
    userIdOfPerson: ID
  }

  type LifeAspect {
    genericLifeAspects: [GenericLifeAspect]
    relationships: [RelationshipAspect]
  }

  type Entry {
    _id: ID!
    user: ID!,
    journaledDate: String
    title: String!
    textBody: String!
    visibility: Visibility
    lifeAspects: [LifeAspect]
    tags: [String]
  }

  type User {
    _id: ID!
    createdAt: String!
    updatedAt: String!
    email: String!
    password: String!
    firstName: String!
    birthDate: String
    entries: [Entry]
    lifeAspects: [LifeAspect]
  }

  type Token {
    value: String!
  }

  type Query {
    getUserById(userId: ID!): User
    userCount: Int!
  }

  type Mutation {
    addUser(
      email: String!
      password: String!
      firstName: String!
      birthDate: String!
    ): User

    login (
      email: String!
      password: String!
    ): Token
  }
`
